export struct Unit {}
export union Never {}

->[represent = "boolean"]
export union Boolean {
    True, False,
}

export union Option(T: Type) {
    Some { T },
    Nothing,
}

-> provide_default(resultBase)
export union Result(T: Type, E: Type) {
    Okay { T },
    Error { E },
}

export provide resultBase(T: Type, E: Type) for Result(T, E) {

    func unwrap_or(self: Self, default: T) -> T {
        match self {
            Okay { value } -> value,
            Error { err } -> default,
        }
    }

    func map(
        self: Self,
        R: Type,
        fn: \func (val: T) -> R
    )
        -> Result(R, E)
    {
        match self {
            Okay { value } -> Okay { fn(value) },
            Err { err } -> Err { Err },
        }
    }
}
