use std::str::FromStr;
use crate::ast::*;

grammar;

match {
    "func", "->",

    "main", "I32",

    "(", ")", "{", "}",

    "+",

    r"[a-zA-Z_]\w*" => IDENTIFIER,
    r"[0-9]+" => INT_LITERAL,
}

#[inline]
Boxed<T>: Box<T> = T => Box::new(<>);

pub File: File =
    "func" <name: Identifier>  "(" ")" "->" "I32" "{"
        <number: Expression>
    "}" => File { <> };

Identifier: Identifier = IDENTIFIER => Identifier::new(<>.to_string());

Expression = ExprPre0;

// ExprPreN<X, Op, Y>: Expression = {
//     <left: Boxed<X>> <operator: Op> <right: Boxed<Y>> => Expression::InfixCall { <> },
//     Y,
// }

// ExprPre1 = ExprPreN<ExprPre1, OpPre1, ExprPre0>;

// OpPre1: InfixOperator = {
//     "+" => InfixOperator::Add,
// }

ExprPre0: Expression = {
    IntLiteral => Expression::Literal(<>),
    "(" <Expression> ")",
}

IntLiteral: i32 = INT_LITERAL => i32::from_str(<>).unwrap();
