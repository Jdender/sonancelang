use crate::parse::*;
use std::str::FromStr;

grammar;

match {
    "func", "return", "->", ";",

    "I32",

    "(", ")", "{", "}", // Parens

    "+", "-", "*", "/", "!", // Operators

    r"[a-zA-Z_]\w*" => IDENTIFIER,
    r"[0-9]+" => INT_LITERAL,
}

#[inline]
Boxed<T>: Box<T> = T => Box::new(<>);

pub File: File =
    "func" <Identifier> "(" ")" "->" "I32" "{"
        "return" <Expression> ";"
    "}" => File(<>);

pub Identifier: Identifier = IDENTIFIER => Identifier(<>.to_string());

pub Expression = ExprPre2;

ExprPre2: Expression = {
    Boxed<ExprPre2> OpPre2 Boxed<ExprPre1> => Expression::InfixOp(<>),
    ExprPre1,
}

OpPre2: InfixOp = {
    "+" => InfixOp::Add,
    "-" => InfixOp::Subtract,
}

ExprPre1: Expression = {
    Boxed<ExprPre1> OpPre1 Boxed<ExprPre0> => Expression::InfixOp(<>),
    ExprPre0,
}

OpPre1: InfixOp = {
    "*" => InfixOp::Multiply,
    "/" => InfixOp::Divide,
}

ExprPre0: Expression = {
    IntLiteral => Expression::Literal(<>),
    PrefixOp Boxed<ExprPre0> => Expression::PrefixOp(<>),
}

PrefixOp: PrefixOp = {
    "-" => PrefixOp::Negate,
    "!" => PrefixOp::BooleanNot,
}

pub IntLiteral: i32 = INT_LITERAL => i32::from_str(<>).unwrap();
