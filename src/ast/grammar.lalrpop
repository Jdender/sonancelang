use {std::str::FromStr, crate::ast::*};

grammar;

match {
    // Comments
    r"//[^\n\r]*[\n\r]*" => { },
    r"/\*([^\*]*\*+[^\*/])*([^\*]*\*+|[^\*])*\*/" => { },
} else {
    "export", "func", "declare", // Item

    ":", ",", "->", ";", // Punctuation

    // Tys
    "I8", "I16", "I32", "I64",
    "U8", "U16", "U32", "U64",
    "F32", "F64", "as",

    "let", "if", "else", "=", // Special Operators

    "(", ")", "{", "}", // Parens

    "+", "-", "*", "/", // Numeric Operators

    "==", "!=", "<", ">", "<=", ">=", // Comparison Operators

    "!", "||", "&&", // Boolean Operators

    // Regex Tokens
    r"[a-zA-Z_]\w*" => IDENTIFIER,
    r"[+-]?\d+" => INT_LITERAL,
    r"[+-]?\d+\.\d+" => FLOAT_LITERAL,
    "\"c\"" => C_IDENT,
} else {
    r"\s*" => { }, // Whitespace
}

#[inline]
Boxed<T>: Box<T> = T => Box::new(<>);

#[inline]
List<T, S>: Vec<T> = {
    <v:(<T> S)*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

pub File: File = <items: Item*> => File { <> };

Item: Item = {
    DeclareBlock => Item::Declare(<>),
    Function => Item::Function(<>),
}

DeclareBlock: DeclareBlock = "declare" C_IDENT "{" <functions: DeclareFunction*> "}" => DeclareBlock { <> };

DeclareFunction: DeclareFunction =
    "func"  <name: Identifier> "(" <params: List<Parameter, ",">> ")" "->" <ty: Ty> ";"
        => DeclareFunction { <> };

Function: Function = <scope: Scope> "func"
    <name: Identifier> "(" <params: List<Parameter, ",">> ")" "->" <ty: Ty>
    <body: Block> => Function { <> };

    Parameter: Parameter = <name: Identifier> ":" <ty: Ty> => Parameter { <> };

Scope: Scope = {
    => Scope::Local,
    "export" => Scope::Export,
}

Identifier: Identifier = IDENTIFIER => Identifier::new(<>.to_string());

Ty: Ty = {
    "I8"  => Ty::I8 ,
    "I16" => Ty::I16,
    "I32" => Ty::I32,
    "I64" => Ty::I64,
    "U8"  => Ty::U8 ,
    "U16" => Ty::U16,
    "U32" => Ty::U32,
    "U64" => Ty::U64,
    "F32" => Ty::F32,
    "F64" => Ty::F64,
}

Block: Block = {
    "{" "}"=> Block { body: vec![], trailing: None },
    "{" <body: Statement*> <trailing: Boxed<Expression>> "}" => Block { body, trailing: Some(trailing) },
    "{" <body: Statement*> <last: StatementWithSemi> "}" => Block {
        body: {
            let mut v = body;
            v.push(last);
            v
        },
        trailing: None
    },
}

Statement: Statement = {
    <ExpressionWithBlock> => Statement::SideEffect(<>),
    StatementWithSemi,
}

StatementWithSemi: Statement = {
    "let" <place: Identifier> <ty: (":" <Ty>)?> "=" <value: Expression> ";" => Statement::LetBinding { <> },
    <Expression> ";" => Statement::SideEffect(<>),
}

ExpressionWithBlock: Expression = {
    Block => Expression::Block(<>),
    "if" <predicate: Boxed<Expression>> <when_true: Block> "else" <when_false: Block> => Expression::IfElse { <> },
}

Expression = {
    <place: Identifier> "=" <value: Boxed<Expression>> => Expression::Assignment { <> },
    ExpressionWithBlock,
    ExprPre6,
}

ExprPreN<X, Op, Y>: Expression = {
    <left: Boxed<X>> <operator: Op> <right: Boxed<Y>> => Expression::InfixCall { <> },
    Y,
}

ExprPre6 = ExprPreN<ExprPre6, OpPre6, ExprPre5>;

OpPre6: InfixOperator = {
    // "||" => InfixOperator::BooleanOr,
}

ExprPre5 = ExprPreN<ExprPre5, OpPre5, ExprPre4>;

OpPre5: InfixOperator = {
    // "&&" => InfixOperator::BooleanAnd,
}

ExprPre4 = ExprPreN<ExprPre4, OpPre4, ExprPre3>;

OpPre4: InfixOperator = {
    "==" => InfixOperator::Equal,
    "!="=> InfixOperator::NotEqual,
}

ExprPre3 = ExprPreN<ExprPre3, OpPre3, ExprPre2>;

OpPre3: InfixOperator = {
    ">"=> InfixOperator::GreaterThan,
    "<"=> InfixOperator::LessThan,
    ">="=> InfixOperator::GreaterOrEqual,
    "<="=> InfixOperator::LessOrEqual,
}

ExprPre2 = ExprPreN<ExprPre2, OpPre2, ExprPre1>;

OpPre2: InfixOperator = {
    "+" => InfixOperator::Add,
    "-" => InfixOperator::Subtract,
}

ExprPre1 = ExprPreN<ExprPre1, OpPre1, ExprPre0>;

OpPre1: InfixOperator = {
    "*" => InfixOperator::Multiply,
    "/" => InfixOperator::Divide,
}

ExprPre0: Expression = {
    "(" <Expression> ")",
    <operator: PrefixOperator> <value: Boxed<ExprPre0>> => Expression::PrefixCall { <> },
    <name: Identifier> "(" <args: List<Expression, ",">> ")" => Expression::FuncCall { <> },

    Literal => Expression::Literal(<>),
    Identifier => Expression::Lookup(<>),
}

PrefixOperator: PrefixOperator = {
    "-" => PrefixOperator::Negate,
    // "!" => PrefixOperator::BooleanNot,
}

Literal: Literal = {
    <INT_LITERAL>    "as" "I8"    => Literal::I8 (i8 ::from_str(<>).unwrap()),
    <INT_LITERAL>    "as" "I16"   => Literal::I16(i16::from_str(<>).unwrap()),
    <INT_LITERAL>   ("as" "I32")? => Literal::I32(i32::from_str(<>).unwrap()),
    <INT_LITERAL>    "as" "I64"   => Literal::I64(i64::from_str(<>).unwrap()),
    <INT_LITERAL>    "as" "U8"    => Literal::U8 (u8 ::from_str(<>).unwrap()),
    <INT_LITERAL>    "as" "U16"   => Literal::U16(u16::from_str(<>).unwrap()),
    <INT_LITERAL>    "as" "U32"   => Literal::U32(u32::from_str(<>).unwrap()),
    <INT_LITERAL>    "as" "U64"   => Literal::U64(u64::from_str(<>).unwrap()),
    <FLOAT_LITERAL> ("as" "F32")? => Literal::F32(f32::from_str(<>).unwrap()),
    <FLOAT_LITERAL>  "as" "F64"   => Literal::F64(f64::from_str(<>).unwrap()),
}
