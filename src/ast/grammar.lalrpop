use std::str::FromStr;
use crate::ast::*;

grammar;

match {
    "I32", // Temporary

    "func", "->", "let", ";", // Function

    "=", // Special Operators

    "(", ")", "{", "}", // Parens

    "+", "-", "*", "/", // Numeric Operators

    // Regex Tokens
    r"[a-zA-Z_]\w*" => IDENTIFIER,
    r"[0-9]+" => INT_LITERAL,
}

#[inline]
Boxed<T>: Box<T> = T => Box::new(<>);

pub File: File = "func" <name: Identifier>  "(" ")" "->" "I32" <body: Block> => File { <> };

Identifier: Identifier = IDENTIFIER => Identifier::new(<>.to_string());

Block: Block = "{" <body: Statement*> <trailing: Boxed<Expression>> "}" => Block { <> };

Statement: Statement = {
    "let" <place: Identifier> "=" <value: Expression> ";" => Statement::LetBinding { <> },
    <Expression> ";" => Statement::SideEffect(<>),
    <ExpressionWithBlock> => Statement::SideEffect(<>),
}

ExpressionWithBlock: Expression = {
    Block => Expression::Block(<>),
}

Expression = {
    <place: Identifier> "=" <value: Boxed<Expression>> => Expression::Assignment { <> },
    ExpressionWithBlock,
    ExprPre2,
}

ExprPreN<X, Op, Y>: Expression = {
    <left: Boxed<X>> <operator: Op> <right: Boxed<Y>> => Expression::InfixCall { <> },
    Y,
}

ExprPre2 = ExprPreN<ExprPre2, OpPre2, ExprPre1>;

OpPre2: InfixOperator = {
    "+" => InfixOperator::Add,
    "-" => InfixOperator::Subtract,
}

ExprPre1 = ExprPreN<ExprPre1, OpPre1, ExprPre0>;

OpPre1: InfixOperator = {
    "*" => InfixOperator::Multiply,
    "/" => InfixOperator::Divide,
}

ExprPre0: Expression = {
    <operator: PrefixOperator> <value: Boxed<ExprPre0>> => Expression::PrefixCall { <> },
    "(" <Expression> ")",

    IntLiteral => Expression::Literal(<>),
    Identifier => Expression::Lookup(<>),
}

PrefixOperator: PrefixOperator = {
    "-" => PrefixOperator::Negate,
}

IntLiteral: i32 = INT_LITERAL => i32::from_str(<>).unwrap();
