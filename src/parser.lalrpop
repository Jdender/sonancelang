use crate::parse::*;

grammar;

pub Identifier: Identifier = r"[a-zA-Z_][a-zA-Z0-9_]*" => Identifier(<>.to_string());

List<T, S>: Vec<T> = {
    <v:(<T> S)*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

pub Module: Module = Item* => Module { items: <> };

pub Item: Item = {
    FunctionItem => Item::Function(<>),
}

pub FunctionItem: FunctionItem =
    "func" <name: Identifier> <arguments: Arguments> <return_type: ("->" <Type>)?> <body: Block>
        => FunctionItem { <> };

pub Arguments: Arguments = "(" <normal: List<Argument, ",">> ")" => Arguments { <> };

pub Argument: Argument =
    <name: (<Identifier> "as")?> <pattern: Pattern> ":" <declared_type: Type> => Argument { <> };

pub Type: Type = {
    <name: Identifier> => Type { <>, arguments: vec![] },
    <name: Identifier> "[" <arguments: List<Type, ",">> "]" => Type { <> },
}

pub Pattern: Pattern = {
    Identifier => Pattern::Identifier(<>),
}

pub Block: Block = "{" "}" => Block {};
