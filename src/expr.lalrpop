use std::str::FromStr;
use crate::parser::*;

grammar;

Identifier: Identifier = {
    r"[a-zA-Z_][a-zA-Z0-9_]*" => Identifier(<>.to_string()),
};

pub Block: Block = {
    <body: (<Statement>)*> <trailing: Expression?> => Block { <> },
};

Statement: Statement = {
    "let" <Identifier> "=" <Expression> ";" => Statement::Assignment(<>),
    <Expression> ";" => Statement::SideEffect(<>),
};

Expression: Expression = {
    "(" <Expression> ")",
    Literal => Expression::Literal(<>),
    "(" <x: Expression> <op: Opcode> <y: Expression> ")" => Expression::Operation(Box::new(x), op, Box::new(y)),
};

Opcode: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};

Literal: Literal = {
    r"[+-]?\d+" => Literal::Int(i32::from_str(<>).unwrap()),
    r"[+-]?(\d+\.\d*|\.\d+)" => Literal::Float(f32::from_str(<>).unwrap()),
};
