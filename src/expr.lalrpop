use std::str::FromStr;
use crate::parser::*;

grammar;

Boxed<T>: Box<T> = T => Box::new(<>);

Identifier: Identifier = {
    r"[a-zA-Z_][a-zA-Z0-9_]*" => Identifier(<>.to_string()),
};

pub Block: Block = {
    <body: (<Statement>)*> <trailing: Expression?> => Block { <> },
};

Statement: Statement = {
    "let" <Identifier> "=" <Expression> ";" => Statement::Assignment(<>),
    <Expression> ";" => Statement::SideEffect(<>),
};

Expression: Expression = ExprP2;

OpcodeP2: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

// Left-to-Right: +, -
ExprP2: Expression = {
    Boxed<ExprP2> OpcodeP2 Boxed<ExprP1> => Expression::Operation(<>),
    ExprP1,
};

OpcodeP1: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};

// Left-to-Right: *, /
ExprP1: Expression = {
    Boxed<ExprP1> OpcodeP1 Boxed<ExprP0> => Expression::Operation(<>),
    ExprP0,
};

// N/A: (parens), literals
ExprP0: Expression = {
    "(" <Expression> ")",
    Literal => Expression::Literal(<>),
};

Literal: Literal = {
    r"[+-]?\d+" => Literal::Int(i32::from_str(<>).unwrap()),
    r"[+-]?(\d+\.\d*|\.\d+)" => Literal::Float(f32::from_str(<>).unwrap()),
};
